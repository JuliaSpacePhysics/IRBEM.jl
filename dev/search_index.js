var documenterSearchIndex = {"docs":
[{"location":"#IRBEM.jl","page":"Home","title":"IRBEM.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia wrapper for the IRBEM (International Radiation Belt Environment Modeling)","category":"page"},{"location":"#IRBEM","page":"Home","title":"IRBEM","text":"A wrapper for International Radiation Belt Environment Modeling (IRBEM) library\n\nSee the Documentation for more information.\n\nFunctions\n\nComputing magnetic field coordinates\n\nmake_lstar: Compute magnetic coordinates at a spacecraft position\nget_mlt: Get Magnetic Local Time from GEO position and date\n\nPoints of interest on the field line\n\nfind_mirror_point: Find magnitude and location of mirror point along field line\nfind_foot_point: Find footprint of field line in a given hemisphere\nfind_magequator: Find coordinates of magnetic equator from field line tracing\n\nMagnetic field computation\n\nget_field_multi: Compute GEO vector of magnetic field at input location\nget_bderivs: Compute the magnetic field and its 1st-order derivatives at each input location\n\nField tracing\n\ntrace_field_line: Trace a full field line crossing the input position\ndrift_shell: Trace a full drift shell for particles with mirror point at input location\ndrift_bounce_orbit: Trace a full bounce orbit for particles with mirror point at input location\n\nCoordinates transformations\n\ntransform: Transform coordinates from one system to another\n\nLibrary information\n\nget_igrf_version: Returns the version number of the IGRF model\nirbem_fortran_version: Provides the repository version number of the fortran source code\nirbem_fortran_release: Provides the repository release tag of the fortran source code\n\nReferences\n\nIRBEM Documentation\nIRBEM GitHub\nspacepy.irbempy\n\n\n\n\n\n","category":"module"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"#Computing-magnetic-field-coordinates","page":"Home","title":"Computing magnetic field coordinates","text":"","category":"section"},{"location":"#IRBEM.make_lstar","page":"Home","title":"IRBEM.make_lstar","text":"make_lstar(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nmake_lstar(model::MagneticField, X, maginput=Dict())\n\nCompute magnetic coordinates at a spacecraft position.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\n\nReturns\n\nNamedTuple: Contains fields Lm, MLT, Blocal, Bmin, Lstar, and XJ\n\nExamples\n\njulia> make_lstar(\"2015-02-02T06:12:43\", [600.0, 60.0, 50.0], \"GDZ\", Dict(\"Kp\" => 40.0))\n(Lm = 3.5597242229067536, Lstar = -1.0e31, Blocal = 42271.43059990003, Bmin = 626.2258295723121, XJ = 7.020585390925573, MLT = 10.170297893176182)\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.get_mlt","page":"Home","title":"IRBEM.get_mlt","text":"get_mlt(X::Dict)\n\nX is a dictionary specifying the time and location in GEO coordinates.\n\nSee IRBEM Python API\n\n\n\n\n\nget_mlt(ùê´, time)\nget_mlt(x, y, z, time)\n\nGet Magnetic Local Time (MLT) from a Cartesian GEO position ùê´ and time.\n\n\n\n\n\n","category":"function"},{"location":"#Points-of-interest-on-the-field-line","page":"Home","title":"Points of interest on the field line","text":"","category":"section"},{"location":"#IRBEM.find_mirror_point","page":"Home","title":"IRBEM.find_mirror_point","text":"find_mirror_point(time, x, alpha, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nfind_mirror_point(model::MagneticField, X, alpha, maginput=Dict())\n\nFind the magnitude and location of the mirror point along a field line traced from any given location and local pitch-angle.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\nalpha: Local pitch angle in degrees\n\nOutputs\n\nBlocal: magnitude of magnetic field at point (nT)\nBmirr: magnitude of the magnetic field at the mirror point (nT)\nposit (array of 3 double): GEO coordinates of the mirror point (Re)\n\nReferences: IRBEM API\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.find_magequator","page":"Home","title":"IRBEM.find_magequator","text":"find_magequator(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nfind_magequator(model::MagneticField, X, maginput=Dict())\n\nFind the coordinates of the magnetic equator from tracing the magnetic field line from the input location. Returns a named tuple with fields Bmin and XGEO (location of magnetic equator in GEO coordinates).\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.find_foot_point","page":"Home","title":"IRBEM.find_foot_point","text":"find_foot_point(time, x, stop_alt, hemi_flag, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nfind_foot_point(model::MagneticField, X, stop_alt, hemi_flag, maginput=Dict())\n\nFind the footprint of a field line that passes through location X in a given hemisphere.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\nstop_alt: Altitude in km where to stop field line tracing\nhemi_flag: Hemisphere flag (0: same as SM z, +1: northern, -1: southern)\n\nOutputs\n\nXFOOT: GDZ coordinates of the foot point (Re)\nBFOOT: magnetic field vector (GEO) at the foot point (nT)\nBFOOTMAG: magnitude of the magnetic field at the foot point (nT)\n\nReferences: IRBEM API\n\n\n\n\n\n","category":"function"},{"location":"#Magnetic-field-computation","page":"Home","title":"Magnetic field computation","text":"","category":"section"},{"location":"#IRBEM.get_field_multi","page":"Home","title":"IRBEM.get_field_multi","text":"get_field_multi(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nget_field_multi(model::MagneticField, X, maginput=Dict())\n\nCompute the GEO vector of the magnetic field at input location for a set of internal/external magnetic field.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\n\nReturns\n\nNamedTuple: Contains fields Bgeo (GEO components of B field) and Bmag (magnitude of B field)\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.get_bderivs","page":"Home","title":"IRBEM.get_bderivs","text":"get_bderivs(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nget_bderivs(model::MagneticField, X, maginput=Dict())\n\nCompute the magnetic field and its 1st-order derivatives at each input location.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\n\nReturns\n\nNamedTuple: Contains fields Bgeo (GEO components of B field), Bmag (magnitude of B field), gradBmag (gradients of Bmag in GEO), and diffB (derivatives of the magnetic field vector).\n\nExamples\n\njulia> get_bderivs(\"2015-02-02T06:12:43\", [600.0, 60.0, 50.0], 0.1, \"GDZ\", Dict(\"Kp\" => 40.0)) |> pprint\n(Bgeo = [-21079.764883133903, -21504.21460705096, -29666.24532305791],\n Bmag = 42271.43059990003,\n gradBmag = [-49644.37271032293, -46030.37495428827, -83024.03530787815],\n diffB =\n     [-13530.079906431165 31460.805163291334 53890.73134176735; 30427.464243221693 -16715.08632269888 50326.93737340687; 62620.43884602288 59981.93936448166 44395.53254933224])\n\n\n\n\n\n","category":"function"},{"location":"#Field-tracing","page":"Home","title":"Field tracing","text":"","category":"section"},{"location":"#IRBEM.trace_field_line","page":"Home","title":"IRBEM.trace_field_line","text":"trace_field_line(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[], R0=1.0)\ntrace_field_line(model::MagneticField, X, maginput=Dict(); R0=1.0)\n\nTrace a full field line which crosses the input position until radial distance R0=1.0 (Re).\n\nOutputs\n\nLm: L McIlwain\nBlocal (array of 3000 double): magnitude of magnetic field at point (nT)\nBmin: magnitude of magnetic field at equator (nT)\nXJ: I, related to second adiabatic invariant (Re)\nposit (array of (3, 3000) double): Cartesian coordinates in GEO along the field line\nNposit: number of points in posit\n\nReference: IRBEM API\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.drift_shell","page":"Home","title":"IRBEM.drift_shell","text":"drift_shell(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\ndrift_shell(model::MagneticField, X, maginput=Dict())\n\nTrace a full drift shell for particles that have their mirror point at the input location.\n\nOutputs\n\nLm: L McIlwain\nLstar: L Roederer or Œ¶=2œÄ Bo/L* (nT Re2), depending on the options value\nBlocal (array of (1000, 48)): magnitude of magnetic field at point (nT)\nBmin: magnitude of magnetic field at equator (nT)\nXJ: I, related to second adiabatic invariant (Re)\nposit (array of (3, 1000, 48)): Cartesian coordinates in GEO along the drift shell\nNposit (array of 48 integer): number of points in posit along each traced field line\n\nReference: IRBEM API\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.drift_bounce_orbit","page":"Home","title":"IRBEM.drift_bounce_orbit","text":"drift_bounce_orbit(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[], alpha=90, R0=1)\ndrift_bounce_orbit(model::MagneticField, X, maginput=Dict(); alpha=90, R0=1)\n\nTrace a full drift-bounce orbit for particles with a specified pitch angle alpha=90 at the input location until radial distance R0=1.0 (Re).  Returns only positions between mirror points, with 25 azimuths.\n\nOutputs:\n\nLm: L McIlwain\nLstar: L Roederer or Œ¶=2œÄ Bo/L* (nT Re2), depending on the options value\nBlocal (array of (1000, 25) double): magnitude of magnetic field at point (nT)\nBmin: magnitude of magnetic field at equator (nT)\nXJ: I, related to second adiabatic invariant (Re)\nposit (array of (3, 1000, 25) double): Cartesian coordinates in GEO along the drift shell\nNposit (array of 25 integer): number of points in posit along each traced field line\n\nReference: IRBEM API\n\n\n\n\n\n","category":"function"},{"location":"#Coordinates-transformations","page":"Home","title":"Coordinates transformations","text":"","category":"section"},{"location":"#IRBEM.transform","page":"Home","title":"IRBEM.transform","text":"transform(time, pos, in, out)\n\nTransform coordinates from in coordinate system to out coordinate system.\n\nNote: pos must be of shape (3,) for single point or (3, n) for multiple points\n\nExample\n\nusing Dates\nusing IRBEM\n\ntime = DateTime(2020, 1, 1)\npos = [6.90274, -1.63624, 1.91669]\n\nGSM(time, GEO(pos))\ntransform(time, pos, \"GEO\", \"GSM\")\ntransform(time, pos, \"GEO\" => \"GSM\")\ntransform(time, pos, \"geo2gsm\")\n\n\n\n\n\n","category":"function"},{"location":"#Python-interface","page":"Home","title":"Python interface","text":"","category":"section"},{"location":"#IRBEM.PythonAPI","page":"Home","title":"IRBEM.PythonAPI","text":"PythonAPI\n\nPython-like interface to IRBEM.jl\n\nReferences: IRBEM Python API\n\n\n\n\n\n","category":"module"},{"location":"#Library-information","page":"Home","title":"Library information","text":"","category":"section"},{"location":"#IRBEM.IRBEM","page":"Home","title":"IRBEM.IRBEM","text":"A wrapper for International Radiation Belt Environment Modeling (IRBEM) library\n\nSee the Documentation for more information.\n\nFunctions\n\nComputing magnetic field coordinates\n\nmake_lstar: Compute magnetic coordinates at a spacecraft position\nget_mlt: Get Magnetic Local Time from GEO position and date\n\nPoints of interest on the field line\n\nfind_mirror_point: Find magnitude and location of mirror point along field line\nfind_foot_point: Find footprint of field line in a given hemisphere\nfind_magequator: Find coordinates of magnetic equator from field line tracing\n\nMagnetic field computation\n\nget_field_multi: Compute GEO vector of magnetic field at input location\nget_bderivs: Compute the magnetic field and its 1st-order derivatives at each input location\n\nField tracing\n\ntrace_field_line: Trace a full field line crossing the input position\ndrift_shell: Trace a full drift shell for particles with mirror point at input location\ndrift_bounce_orbit: Trace a full bounce orbit for particles with mirror point at input location\n\nCoordinates transformations\n\ntransform: Transform coordinates from one system to another\n\nLibrary information\n\nget_igrf_version: Returns the version number of the IGRF model\nirbem_fortran_version: Provides the repository version number of the fortran source code\nirbem_fortran_release: Provides the repository release tag of the fortran source code\n\nReferences\n\nIRBEM Documentation\nIRBEM GitHub\nspacepy.irbempy\n\n\n\n\n\n","category":"module"},{"location":"#IRBEM.GSM","page":"Home","title":"IRBEM.GSM","text":"Geocentric Solar Magnetospheric (GSM)\n\nX points sunward from Earth's center. The X-Z plane is defined to contain Earth's dipole axis (positive North).\n\n\n\n\n\n","category":"type"},{"location":"#IRBEM.beta","page":"Home","title":"IRBEM.beta","text":"beta(Ek, Erest=511.0)\n\nCalculate relativistic beta (v/c) for a particle with kinetic energy Ek. Ek and Erest must be in the same units (default is keV).\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.clean_posit!-Tuple{Any, AbstractVector}","page":"Home","title":"IRBEM.clean_posit!","text":"clean_posit!(posit, Nposit)\n\nRemove trailing NaN values from the posit array.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.coord_sys-Tuple{Any}","page":"Home","title":"IRBEM.coord_sys","text":"coord_sys(axes)\n\nLook up the IRBEM coordinate system integer given a string representation.\n\nCoordinate systems:\n\n0: GDZ: (altitude, latitude, east longitude - km, deg, deg)\n1: GEO: Cartesian GEO - Re\n2: GSM: Cartesian GSM - Re\n3: GSE: Cartesian GSE - Re\n4: SM: Cartesian SM - Re\n5: GEI: Cartesian GEI - Re\n6: MAG: Cartesian MAG - Re\n7: SPH: Spherical GEO - (radial distance, latitude, east longitude - Re, deg, deg)\n8: RLL: Spherical GEO - (radial distance, latitude, east longitude - Re, deg, deg)\n\nReturns the corresponding integer code.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.decompose_time_s-Tuple{Dates.DateTime}","page":"Home","title":"IRBEM.decompose_time_s","text":"decompose_time_s(dt::DateTime)\n\nDecompose a single DateTime into year, day of year, and UT.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.drift_bounce_orbit-Tuple","page":"Home","title":"IRBEM.drift_bounce_orbit","text":"drift_bounce_orbit(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[], alpha=90, R0=1)\ndrift_bounce_orbit(model::MagneticField, X, maginput=Dict(); alpha=90, R0=1)\n\nTrace a full drift-bounce orbit for particles with a specified pitch angle alpha=90 at the input location until radial distance R0=1.0 (Re).  Returns only positions between mirror points, with 25 azimuths.\n\nOutputs:\n\nLm: L McIlwain\nLstar: L Roederer or Œ¶=2œÄ Bo/L* (nT Re2), depending on the options value\nBlocal (array of (1000, 25) double): magnitude of magnetic field at point (nT)\nBmin: magnitude of magnetic field at equator (nT)\nXJ: I, related to second adiabatic invariant (Re)\nposit (array of (3, 1000, 25) double): Cartesian coordinates in GEO along the drift shell\nNposit (array of 25 integer): number of points in posit along each traced field line\n\nReference: IRBEM API\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.drift_shell-Tuple","page":"Home","title":"IRBEM.drift_shell","text":"drift_shell(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\ndrift_shell(model::MagneticField, X, maginput=Dict())\n\nTrace a full drift shell for particles that have their mirror point at the input location.\n\nOutputs\n\nLm: L McIlwain\nLstar: L Roederer or Œ¶=2œÄ Bo/L* (nT Re2), depending on the options value\nBlocal (array of (1000, 48)): magnitude of magnetic field at point (nT)\nBmin: magnitude of magnetic field at equator (nT)\nXJ: I, related to second adiabatic invariant (Re)\nposit (array of (3, 1000, 48)): Cartesian coordinates in GEO along the drift shell\nNposit (array of 48 integer): number of points in posit along each traced field line\n\nReference: IRBEM API\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.find_foot_point-Tuple{Any, Any, Any, Any, Vararg{Any}}","page":"Home","title":"IRBEM.find_foot_point","text":"find_foot_point(time, x, stop_alt, hemi_flag, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nfind_foot_point(model::MagneticField, X, stop_alt, hemi_flag, maginput=Dict())\n\nFind the footprint of a field line that passes through location X in a given hemisphere.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\nstop_alt: Altitude in km where to stop field line tracing\nhemi_flag: Hemisphere flag (0: same as SM z, +1: northern, -1: southern)\n\nOutputs\n\nXFOOT: GDZ coordinates of the foot point (Re)\nBFOOT: magnetic field vector (GEO) at the foot point (nT)\nBFOOTMAG: magnitude of the magnetic field at the foot point (nT)\n\nReferences: IRBEM API\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.find_magequator-Tuple","page":"Home","title":"IRBEM.find_magequator","text":"find_magequator(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nfind_magequator(model::MagneticField, X, maginput=Dict())\n\nFind the coordinates of the magnetic equator from tracing the magnetic field line from the input location. Returns a named tuple with fields Bmin and XGEO (location of magnetic equator in GEO coordinates).\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.find_mirror_point-Tuple{Any, Any, Any, Vararg{Any}}","page":"Home","title":"IRBEM.find_mirror_point","text":"find_mirror_point(time, x, alpha, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nfind_mirror_point(model::MagneticField, X, alpha, maginput=Dict())\n\nFind the magnitude and location of the mirror point along a field line traced from any given location and local pitch-angle.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\nalpha: Local pitch angle in degrees\n\nOutputs\n\nBlocal: magnitude of magnetic field at point (nT)\nBmirr: magnitude of the magnetic field at the mirror point (nT)\nposit (array of 3 double): GEO coordinates of the mirror point (Re)\n\nReferences: IRBEM API\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.gamma","page":"Home","title":"IRBEM.gamma","text":"gamma(Ek, Erest=511.0)\n\nCalculate relativistic gamma factor for a particle with kinetic energy Ek. Ek and Erest must be in the same units (default is keV).\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.get_bderivs-Tuple{Any, Any, Any, Vararg{Any}}","page":"Home","title":"IRBEM.get_bderivs","text":"get_bderivs(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nget_bderivs(model::MagneticField, X, maginput=Dict())\n\nCompute the magnetic field and its 1st-order derivatives at each input location.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\n\nReturns\n\nNamedTuple: Contains fields Bgeo (GEO components of B field), Bmag (magnitude of B field), gradBmag (gradients of Bmag in GEO), and diffB (derivatives of the magnetic field vector).\n\nExamples\n\njulia> get_bderivs(\"2015-02-02T06:12:43\", [600.0, 60.0, 50.0], 0.1, \"GDZ\", Dict(\"Kp\" => 40.0)) |> pprint\n(Bgeo = [-21079.764883133903, -21504.21460705096, -29666.24532305791],\n Bmag = 42271.43059990003,\n gradBmag = [-49644.37271032293, -46030.37495428827, -83024.03530787815],\n diffB =\n     [-13530.079906431165 31460.805163291334 53890.73134176735; 30427.464243221693 -16715.08632269888 50326.93737340687; 62620.43884602288 59981.93936448166 44395.53254933224])\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.get_datetime-Tuple{Dict}","page":"Home","title":"IRBEM.get_datetime","text":"get_datetime(X::Dict)\n\nExtract datetime from input dictionary X. Supports 'dateTime' or 'Time' keys with DateTime or String values.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.get_field_multi-Tuple{Int32, Vararg{Any}}","page":"Home","title":"IRBEM.get_field_multi","text":"get_field_multi(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nget_field_multi(model::MagneticField, X, maginput=Dict())\n\nCompute the GEO vector of the magnetic field at input location for a set of internal/external magnetic field.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\n\nReturns\n\nNamedTuple: Contains fields Bgeo (GEO components of B field) and Bmag (magnitude of B field)\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.get_igrf_version-Tuple{}","page":"Home","title":"IRBEM.get_igrf_version","text":"Returns the version number of the IGRF model.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.get_irbem_ntime_max1!-Tuple{Any}","page":"Home","title":"IRBEM.get_irbem_ntime_max1!","text":"Returns the size of time dimension in inputs and/or output arrays for some of the routines.\n\nReference: IRBEM Documentation\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.get_mlt-Tuple{Any, Any}","page":"Home","title":"IRBEM.get_mlt","text":"get_mlt(ùê´, time)\nget_mlt(x, y, z, time)\n\nGet Magnetic Local Time (MLT) from a Cartesian GEO position ùê´ and time.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.irbem_fortran_release-Tuple{}","page":"Home","title":"IRBEM.irbem_fortran_release","text":"Provides the repository release tag of the fortran source code.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.irbem_fortran_version-Tuple{}","page":"Home","title":"IRBEM.irbem_fortran_version","text":"Provides the repository version number of the fortran source code.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.make_lstar-Tuple{Int32, Vararg{Any}}","page":"Home","title":"IRBEM.make_lstar","text":"make_lstar(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[])\nmake_lstar(model::MagneticField, X, maginput=Dict())\n\nCompute magnetic coordinates at a spacecraft position.\n\nArguments\n\nSignature 1:\n\ntime: Date and time (DateTime, Vector{DateTime}, or String)\nx: Position coordinates as a 3√ón array or a tuple/vector of vectors\ncoord: String specifying the coordinate system (default: \"GDZ\")\nkext: External field model selection (optional)\noptions: Model options (optional)\n\nSignature 2:\n\nmodel::MagneticField: The magnetic field model\nX: Dictionary with keys:\ndateTime or Time: Date and time (DateTime or String)\nx1, x2, x3: Position coordinates in the system specified by sysaxes\n\nCommon arguments:\n\nmaginput: Dictionary with magnetic field model inputs (optional)\n\nReturns\n\nNamedTuple: Contains fields Lm, MLT, Blocal, Bmin, Lstar, and XJ\n\nExamples\n\njulia> make_lstar(\"2015-02-02T06:12:43\", [600.0, 60.0, 50.0], \"GDZ\", Dict(\"Kp\" => 40.0))\n(Lm = 3.5597242229067536, Lstar = -1.0e31, Blocal = 42271.43059990003, Bmin = 626.2258295723121, XJ = 7.020585390925573, MLT = 10.170297893176182)\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.prepare_maginput-Tuple{Any}","page":"Home","title":"IRBEM.prepare_maginput","text":"prepare_maginput(maginput)\n\nProcess magnetic field model inputs from input dictionary. Returns a properly formatted array for IRBEM functions.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.process_coords_time-Tuple{Dict}","page":"Home","title":"IRBEM.process_coords_time","text":"process_coords_time(X::Dict)\n\nProcess coordinates and time from input dictionary X. Returns ntime, iyear, idoy, ut, x1, x2, x3 arrays for IRBEM functions.\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.trace_field_line-Tuple","page":"Home","title":"IRBEM.trace_field_line","text":"trace_field_line(time, x, coord=\"GDZ\", maginput=Dict(); kext=KEXT[], options=OPTIONS[], R0=1.0)\ntrace_field_line(model::MagneticField, X, maginput=Dict(); R0=1.0)\n\nTrace a full field line which crosses the input position until radial distance R0=1.0 (Re).\n\nOutputs\n\nLm: L McIlwain\nBlocal (array of 3000 double): magnitude of magnetic field at point (nT)\nBmin: magnitude of magnetic field at equator (nT)\nXJ: I, related to second adiabatic invariant (Re)\nposit (array of (3, 3000) double): Cartesian coordinates in GEO along the field line\nNposit: number of points in posit\n\nReference: IRBEM API\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.transform-NTuple{4, Any}","page":"Home","title":"IRBEM.transform","text":"transform(time, pos, in, out)\n\nTransform coordinates from in coordinate system to out coordinate system.\n\nNote: pos must be of shape (3,) for single point or (3, n) for multiple points\n\nExample\n\nusing Dates\nusing IRBEM\n\ntime = DateTime(2020, 1, 1)\npos = [6.90274, -1.63624, 1.91669]\n\nGSM(time, GEO(pos))\ntransform(time, pos, \"GEO\", \"GSM\")\ntransform(time, pos, \"GEO\" => \"GSM\")\ntransform(time, pos, \"geo2gsm\")\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.vparallel","page":"Home","title":"IRBEM.vparallel","text":"vparallel(Ek, Bm, B, Erest=511.0)\n\nCalculate parallel velocity for a particle with kinetic energy Ek, at a location with magnetic field B, with mirror point field Bm. Ek and Erest must be in the same units (default is keV). Returns velocity in m/s.\n\n\n\n\n\n","category":"function"},{"location":"#IRBEM.with_case_variants-Tuple{Any}","page":"Home","title":"IRBEM.with_case_variants","text":"with_case_variants(dict::Dict{S, V}) where {S <: AbstractString, V}\n\nCreates a new dictionary with both uppercase and lowercase variants of each key. The original keys and values are preserved, and lowercase/uppercase variants are added.\n\nExample:\n\noriginal = Dict(\"ABC\" => 1, \"DEF\" => 2)\nresult = with_case_variants(original)\n# result has keys: \"ABC\", \"abc\", \"DEF\", \"def\"\n\n\n\n\n\n","category":"method"},{"location":"#IRBEM.@init_refs-Tuple{Any, Vararg{Any}}","page":"Home","title":"IRBEM.@init_refs","text":"@init_refs(Type, var1, var2, ...)\n\nCreates variables var1, var2, ... each initialized as Ref{Type}(). Example:     @init_refs(Float64, 0.0, Lm, Lstar) expands to:     Lm = Ref{Float64}(0.0)     Lstar = Ref{Float64}(0.0)\n\n\n\n\n\n","category":"macro"}]
}
